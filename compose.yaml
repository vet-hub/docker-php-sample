# Comments are provided throughout this file to help you get started. If you need more help, visit the Docker Compose reference guide at https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "server". This service is built from the Dockerfile in the current directory. You can add other services your application may depend on here, such as a database or a cache. For examples, see the Awesome Compose repository: https://github.com/docker/awesome-compose
# Здесь вы можете добавить службы, от которых может зависеть ваше приложение, например базу данных или кеш. Примеры см. в репозитории Awesome Compose: https://github.com/docker/awesome-compose


# tutorial https://docs.docker.com/language/php/containerize/
#################################################

# Здесь инструкции определяют ваше приложение как службу под названием server. Этот сервис создается из файла Dockerfile в текущем каталоге.
services:

  server:
    build:
      context: .
      # использование зависимостей разработчика
      target: development
    ports:
      - 9000:80
    depends_on:
      db:
        condition: service_healthy
    secrets:
      - db-password
    environment:
      - PASSWORD_FILE_PATH=/run/secrets/db-password
      - DB_HOST=db
      - DB_NAME=example
      - DB_USER=root

    # использование Compose Watch для автоматического обновления запущенных сервисов Compose по мере редактирования и сохранения кода.
    # приложение с Compose Watch запусеается >docker compose watch, затем обновите приложение в браузере для отображения изменений
    # Ctrl+C - чтобы остановить Compose Watch, затем >docker compose down - чтобы остановить приложение.
    develop:
      watch:
        - action: sync
          path: ./src
          target: /var/www/html

  db:
    image: mariadb
    restart: always
    user: root
    secrets:
      - db-password
    volumes:
      - db-data:/var/lib/mysql
    environment:
      - MARIADB_ROOT_PASSWORD_FILE=/run/secrets/db-password
      - MARIADB_DATABASE=example
    expose:
      - 3306
    healthcheck:
      test:  ["CMD", "/usr/local/bin/healthcheck.sh", "--su-mysql", "--connect",  "--innodb_initialized"]
      interval: 10s
      timeout: 5s
      retries: 5

  # добавлен phpMyAdmin для взаимодействия с базой данных
  phpmyadmin:
    image: phpmyadmin
    ports:
      - 8080:80
    depends_on:
      - db
    environment:
      - PMA_HOST=db

# том `db-data` сохраняет данные базы данных между перезапусками контейнера.
volumes:
  db-data:

secrets:
  db-password:
    file: db/password.txt    # вы должны создать `db/password.txt` и добавить пароль


## define a PostgreSQL database

# The commented out section below is an example of how to define a PostgreSQL
# database that your application can use. `depends_on` tells Docker Compose to
# start the database before your application. The `db-data` volume persists the
# database data between container restarts. The `db-password` secret is used
# to set the database password. You must create `db/password.txt` and add
# a password of your choosing to it before running `docker-compose up`.

# Закомментированный раздел ниже представляет собой пример того, как определить базу данных PostgreSQL, которую может использовать ваше приложение. `dependents_on` сообщает Docker Compose запустить базу данных перед вашим приложением. Том `db-data` сохраняет данные базы данных между перезапусками контейнера. Секрет `db-password` используется для установки пароля базы данных. Вы должны создать `db/password.txt` и добавить к нему выбранный вами пароль перед запуском `docker-compose up`.

#     depends_on:
#       db:
#         condition: service_healthy
#   db:
#     image: postgres
#     restart: always
#     user: postgres
#     secrets:
#       - db-password
#     volumes:
#       - db-data:/var/lib/postgresql/data
#     environment:
#       - POSTGRES_DB=example
#       - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
#     expose:
#       - 5432
#     healthcheck:
#       test: [ "CMD", "pg_isready" ]
#       interval: 10s
#       timeout: 5s
#       retries: 5
# volumes:
#   db-data:
# secrets:
#   db-password:
#     file: db/password.txt

